import{_ as e,V as d,W as l,a0 as n}from"./framework-b9ac5585.js";const a={},o=n(`<h1 id="_1825-求出-mk-平均值" tabindex="-1"><a class="header-anchor" href="#_1825-求出-mk-平均值" aria-hidden="true">#</a> 1825. 求出 MK 平均值</h1><h2 id="题目内容" tabindex="-1"><a class="header-anchor" href="#题目内容" aria-hidden="true">#</a> 题目内容</h2><p>给你两个整数 <code>m</code> 和 <code>k</code> ，以及数据流形式的若干整数。你需要实现一个数据结构，计算这个数据流的 <strong>MK 平均值</strong> 。</p><p><strong>MK 平均值</strong> 按照如下步骤计算：</p><ol><li>如果数据流中的整数少于 <code>m</code> 个，<strong>MK 平均值</strong> 为 <code>-1</code> ，否则将数据流中最后 <code>m</code> 个元素拷贝到一个独立的容器中。</li><li>从这个容器中删除最小的 <code>k</code> 个数和最大的 <code>k</code> 个数。</li><li>计算剩余元素的平均值，并 <strong>向下取整到最近的整数</strong> 。</li></ol><p>请你实现 <code>MKAverage</code> 类：</p><ul><li><code>MKAverage(int m, int k)</code> 用一个空的数据流和两个整数 <code>m</code> 和 <code>k</code> 初始化 <strong>MKAverage</strong> 对象。</li><li><code>void addElement(int num)</code> 往数据流中插入一个新的元素 <code>num</code> 。</li><li><code>int calculateMKAverage()</code> 对当前的数据流计算并返回 <strong>MK 平均数</strong> ，结果需 <strong>向下取整到最近的整数</strong> 。</li></ul><p><strong>示例 1：</strong></p><p><strong>输入：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[&quot;MKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;addElement&quot;, &quot;calculateMKAverage&quot;][[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>输出：</strong><code>[null, null, null, -1, null, 3, null, null, null, 5]</code></p><p><strong>解释：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // 当前元素为 [3]
obj.addElement(1);        // 当前元素为 [3,1]
obj.calculateMKAverage(); // 返回 -1 ，因为 m = 3 ，但数据流中只有 2 个元素
obj.addElement(10);       // 当前元素为 [3,1,10]
obj.calculateMKAverage(); // 最后 3 个元素为 [3,1,10]
                          // 删除最小以及最大的 1 个元素后，容器为 [3]
                          // [3] 的平均值等于 3/1 = 3 ，故返回 3
obj.addElement(5);        // 当前元素为 [3,1,10,5]
obj.addElement(5);        // 当前元素为 [3,1,10,5,5]
obj.addElement(5);        // 当前元素为 [3,1,10,5,5,5]
obj.calculateMKAverage(); // 最后 3 个元素为 [5,5,5]
                          // 删除最小以及最大的 1 个元素后，容器为 [5]
                          // [5] 的平均值等于 5/1 = 5 ，故返回 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>3 &lt;= m &lt;= 105</code></li><li><code>1 &lt;= k*2 &lt; m</code></li><li><code>1 &lt;= num &lt;= 105</code></li><li><code>addElement</code> 与 <code>calculateMKAverage</code> 总操作次数不超过 <code>105</code> 次。</li></ul><h2 id="思路和解法" tabindex="-1"><a class="header-anchor" href="#思路和解法" aria-hidden="true">#</a> 思路和解法</h2><p>题目的要求是实现 <code>MKAverage</code> 类， 初始化时，用一个List来存储所有的数字，用两个堆，初始化为k的大小，来存储最大值数据和最小值数据及对应的序号，sum来存储需要计算的的数组和，在 <code>calculateMKAverage</code>时，返回sum/(m-2k),即可。 在添加元素时，即<code>addElement</code>时，List直接add对应元素，其他几个容器需要区分以下的情况：</p><ul><li><p>总元素数量小于m时，</p></li><li><p>元素数量大于m时，</p></li></ul><h2 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h2>`,19),t=[o];function i(c,r){return d(),l("div",null,t)}const u=e(a,[["render",i],["__file","1825求出 MK 平均值.html.vue"]]);export{u as default};
