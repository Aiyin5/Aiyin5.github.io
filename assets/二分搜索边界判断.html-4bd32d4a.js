const n=JSON.parse('{"key":"v-113b2e52","path":"/zh/posts/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E8%BE%B9%E7%95%8C%E5%88%A4%E6%96%AD.html","title":"二分搜索边界判断","lang":"zh-CN","frontmatter":{"description":"二分搜索边界判断 取下边界，最左边的值 取大于等于target的值，左边界取l=mid+1时，中间值需要向下取整。如果目标值不在搜索范围，则取比目标值大的值的最左界。 int findLower(int[] nums,int target) { int l=0,r=nums.length-1; while(l&lt;r){ int mid=l+(r-l)/2; if(nums[mid]&gt;=target){ r=mid; } else{ l=mid+1; } } return l; }","head":[["meta",{"property":"og:url","content":"https://aiyin5.github.io/zh/posts/%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E8%BE%B9%E7%95%8C%E5%88%A4%E6%96%AD.html"}],["meta",{"property":"og:site_name","content":"艾因的博客"}],["meta",{"property":"og:title","content":"二分搜索边界判断"}],["meta",{"property":"og:description","content":"二分搜索边界判断 取下边界，最左边的值 取大于等于target的值，左边界取l=mid+1时，中间值需要向下取整。如果目标值不在搜索范围，则取比目标值大的值的最左界。 int findLower(int[] nums,int target) { int l=0,r=nums.length-1; while(l&lt;r){ int mid=l+(r-l)/2; if(nums[mid]&gt;=target){ r=mid; } else{ l=mid+1; } } return l; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-10T07:31:40.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-01-10T07:31:40.000Z"}]]},"headers":[],"git":{"createdTime":1673335900000,"updatedTime":1673335900000,"contributors":[{"name":"aiyin","email":"372020407@qq.com","commits":1}]},"readingTime":{"minutes":0.56,"words":168},"filePathRelative":"zh/posts/关于技术/算法/二分搜索边界判断.md","localizedDate":"2023年1月10日","excerpt":"<h1> 二分搜索边界判断</h1>\\n<h4> 取下边界，最左边的值</h4>\\n<p>取大于等于target的值，左边界取l=mid+1时，中间值需要向下取整。<br>如果目标值不在搜索范围，则取比目标值大的值的最左界。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">findLower</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> target<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>    \\n    <span class=\\"token keyword\\">int</span> l<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>r<span class=\\"token operator\\">=</span>nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>l<span class=\\"token operator\\">&lt;</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> mid<span class=\\"token operator\\">=</span>l<span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token operator\\">-</span>l<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;=</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            r<span class=\\"token operator\\">=</span>mid<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">{</span>\\n            l<span class=\\"token operator\\">=</span>mid<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> l<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
